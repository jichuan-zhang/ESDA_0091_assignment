# -*- coding: utf-8 -*-
"""knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qo4qWIagkLpzhTlqTtJD0g2-cqfMkEWo
"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import GridSearchCV

from google.colab import files
uploaded = files.upload()

data = pd.read_csv('cleaned_data.csv')

X = data.drop('Prod_LatestAvg_TotActPwr', axis=1)
y = data['Prod_LatestAvg_TotActPwr']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#data standardisation
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define the parameter grid for 'n_neighbors'
param_grid = {
    'n_neighbors': [3, 5, 7, 9, 11, 15, 20, 25, 30]
}

knn = KNeighborsRegressor()

grid_search = GridSearchCV(knn, param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)

# Perform grid search
grid_search.fit(X_train_scaled, y_train)

# Best parameter 'K'
best_k = grid_search.best_params_['n_neighbors']
print("Best K: ", best_k)

# Create KNN regressor with the best 'K'
best_knn = KNeighborsRegressor(n_neighbors=best_k)

# Fit the model
best_knn.fit(X_train_scaled, y_train)

# Making predictions
y_pred = best_knn.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
r_squared = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r_squared}')

#plot
plot_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

# Taking a sample
plot_sample = plot_df.sample(n=300, random_state=42)

# Plotting
plt.figure(figsize=(10,6))
plt.scatter(plot_sample.index, plot_sample['Actual'], color='blue', label='Actual')
plt.scatter(plot_sample.index, plot_sample['Predicted'], color='red', label='Predicted')
plt.title('Actual vs Predicted Power Output')
plt.xlabel('Sample Index')
plt.ylabel('Power Output')
plt.legend()
plt.show()